import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import PageLayout from "~/components/Layout";
import PostView from "~/components/PostView";
import Image from "next/image";
import LoadingSpinner from "~/components/LoadingSpinner";
import { generateSsgHelper } from "~/server/helpers/ssgHelper";

const ProfileFeed = (props: { userId: string }) => {
  const { data, isLoading } = api.post.getPostsByUserId.useQuery({
    userId: props.userId,
  });

  if (isLoading) {
    return <LoadingSpinner />;
  }
  if (!data || data.length === 0) {
    return <div>No posts yet</div>;
  }
  if (data) {
    return (
      <div className="flex flex-col">
        {data.map((fullPost) => {
          return (
            <PostView
              key={fullPost.post.id}
              post={fullPost.post}
              author={fullPost.author}
            />
          );
        })}
      </div>
    );
  }
  return <div>error</div>;
};
const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data) {
    return <div>Error</div>;
  }

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <div className="relative h-36 border-slate-400 bg-slate-300">
          <Image
            src={data.profileImageUrl}
            width={128}
            height={128}
            className=" absolute bottom-0 left-0 -mb-[64px] ml-4 rounded-full border-2 border-black"
            alt={`${data.username ?? ""}'s profile pic `}
          />
        </div>
        <div className="h-[64px]"></div>
        <div className="flex border-b p-4 text-2xl">{`@${
          data.username ?? ""
        }`}</div>
        <div className="border-b border-slate-400">
          <ProfileFeed userId={data.id} />
        </div>
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSsgHelper();

  const slug = context.params?.slug;

  if (typeof slug !== "string") {
    throw new Error("slug is not a string");
  }
  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({ username: username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProfilePage;
